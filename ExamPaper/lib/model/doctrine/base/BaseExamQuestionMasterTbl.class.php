<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('ExamQuestionMasterTbl', 'doctrine');

/**
 * BaseExamQuestionMasterTbl
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $ques_content
 * @property integer $ques_type_id
 * @property string $ques_chapter_ids
 * @property string $ques_difficulties
 * @property string $pic_path
 * @property timestamp $insert_date
 * @property timestamp $update_date
 * @property timestamp $delete_date
 * @property ExamQuestionTypeTbl $ExamQuestionTypeTbl
 * @property Doctrine_Collection $ExamPaperFinalTbl
 * 
 * @method integer               getId()                  Returns the current record's "id" value
 * @method string                getQuesContent()         Returns the current record's "ques_content" value
 * @method integer               getQuesTypeId()          Returns the current record's "ques_type_id" value
 * @method string                getQuesChapterIds()      Returns the current record's "ques_chapter_ids" value
 * @method string                getQuesDifficulties()    Returns the current record's "ques_difficulties" value
 * @method string                getPicPath()             Returns the current record's "pic_path" value
 * @method timestamp             getInsertDate()          Returns the current record's "insert_date" value
 * @method timestamp             getUpdateDate()          Returns the current record's "update_date" value
 * @method timestamp             getDeleteDate()          Returns the current record's "delete_date" value
 * @method ExamQuestionTypeTbl   getExamQuestionTypeTbl() Returns the current record's "ExamQuestionTypeTbl" value
 * @method Doctrine_Collection   getExamPaperFinalTbl()   Returns the current record's "ExamPaperFinalTbl" collection
 * @method ExamQuestionMasterTbl setId()                  Sets the current record's "id" value
 * @method ExamQuestionMasterTbl setQuesContent()         Sets the current record's "ques_content" value
 * @method ExamQuestionMasterTbl setQuesTypeId()          Sets the current record's "ques_type_id" value
 * @method ExamQuestionMasterTbl setQuesChapterIds()      Sets the current record's "ques_chapter_ids" value
 * @method ExamQuestionMasterTbl setQuesDifficulties()    Sets the current record's "ques_difficulties" value
 * @method ExamQuestionMasterTbl setPicPath()             Sets the current record's "pic_path" value
 * @method ExamQuestionMasterTbl setInsertDate()          Sets the current record's "insert_date" value
 * @method ExamQuestionMasterTbl setUpdateDate()          Sets the current record's "update_date" value
 * @method ExamQuestionMasterTbl setDeleteDate()          Sets the current record's "delete_date" value
 * @method ExamQuestionMasterTbl setExamQuestionTypeTbl() Sets the current record's "ExamQuestionTypeTbl" value
 * @method ExamQuestionMasterTbl setExamPaperFinalTbl()   Sets the current record's "ExamPaperFinalTbl" collection
 * 
 * @package    ExamPaper
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseExamQuestionMasterTbl extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('exam_question_master_tbl');
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 8,
             ));
        $this->hasColumn('ques_content', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('ques_type_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('ques_chapter_ids', 'string', 64, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 64,
             ));
        $this->hasColumn('ques_difficulties', 'string', 128, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 128,
             ));
        $this->hasColumn('pic_path', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('insert_date', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('update_date', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('delete_date', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('ExamQuestionTypeTbl', array(
             'local' => 'ques_type_id',
             'foreign' => 'id'));

        $this->hasMany('ExamPaperFinalTbl', array(
             'local' => 'id',
             'foreign' => 'exam_ques_id'));
    }
}